= httpd and httpasswd
:author: mulander
:authorNick: mulander
:email: mulander@openbsd.org
:editor: Mathieu Kerjouan
:editorNick: niamtokik
:editorEmail: contact@steepath.eu
:date: 2017-06-06
:revision: 2017-06-16
:copyright: CC-BY-4.0
:copyrightUrl: https://creativecommons.org/licenses/by/4.0/
:description: Find out how htpasswd is handled.	      
:keywords: httpd,htpasswd
:originUrl: https://junk.tintagel.pl/openbsd-daily-httpd.txt
:source: #openbsd-daily
:sourceUrl: `irc://irc.freenode.net/{source}`
:lang: en
:toc2:
:icons:
:data-uri:

:MAN:    https://man.openbsd.org
:CVS:    https://cvsweb.openbsd.org/cgi-bin/cvsweb
:BXR:    http://bxr.su/OpenBSD
:GITHUB: https://github.com
:GIST:   https://gist.github.com

== License

{copyright}.
ifdef::copyrightUrl[]
Full license is available at this URL: {copyrightUrl}.
endif::copyrightUrl[]

== Acknowledgement

ifdef::author[]
This document was originaly created ({date}) by {author} a.k.a
{authorNick} <{email}>.
endif::[]

ifdef::source[]
Raw documentation source is available at {originUrl} and was recorded
from {sourceUrl}.
endif::source[]

ifdef::editor[]
This document was edited ({revision}) by {editor} a.k.a {editorNick}
<{editorEmail}>.
endif::editor[]

== Summary

{description}

== Content

Yesterday, I read {BXR}/usr.bin/htpasswd/htpasswd.c[`htpasswd.c`]
which generates password files that web servers use to restrict access
httpd in base system handles this, and I want to know how and what API
it uses for handling the encrypted code (the old
{MAN}/man3/crypt.3[`bcrypt`] or the new
{MAN}/man1/encrypt.1[`encrypt`] API). The target is scoped as
{MAN}/httpd[`httpd`] itself:

 * ~7000 lines of C;
 * ~2000 lines of yacc;
 * ~800 lines of headers (~10k lines of code).

Starting off by looking at the manpage doing a search for
http://man.openbsd.org/htpasswd[`htpasswd`], lands us immediately on
the option:

.Man page output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[no] authenticate [realm] with htpasswd
     Authenticate a remote user for realm by checking the credentials
     against the user authentication file htpasswd.  The file name is
     relative to the chroot and must be readable by the www user. Use
     the no authenticate directive to disable authentication in a
     location.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Okay, so  we confirmed it's  handled. Let's do  a quick `grep`  to see
https://gist.github.com/mulander/05fd26d789ea778d9b1c0c451bdeec01[occurences
of htpasswd in code].

.Executing
[sh]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ag htpasswd
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.Output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
httpd.conf.5
175:.It Oo Ic no Oc Ic authenticate Oo Ar realm Oc Ic with Pa htpasswd
179:.Pa htpasswd .
690:.Xr htpasswd 1 ,

parse.y
828:                            /* New htpasswd, get new Id */
851:                    if (strlcpy($$.auth_htpasswd, $3,
852:                        sizeof($$.auth_htpasswd)) >=
853:                        sizeof($$.auth_htpasswd)) {
862:                    if (strlcpy($$.auth_htpasswd, $2,
863:                        sizeof($$.auth_htpasswd)) >=
864:                        sizeof($$.auth_htpasswd)) {

config.c
716:                auth->auth_htpasswd, auth->auth_id, ps->ps_title[id]);
738:                __func__, auth.auth_htpasswd, auth.auth_id);
744:        auth.auth_htpasswd, auth.auth_id);

server_http.c
157:    if ((fp = fopen(auth->auth_htpasswd, "r")) == NULL)

httpd.c
1284:           if (strcmp(entry->auth_htpasswd, auth->auth_htpasswd) == 0)

httpd.h
446: char auth_htpasswd[PATH_MAX];
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We see the manpage entry.  First, we can skip that then there's a
{BXR}/usr.sbin/httpd/parse.y[`parse.y`] file which is probably an
intermediate parsing declaration file. Taking a look at
{BXR}/usr.sbin/httpd/Makefile[`Makefile`] to see how it's built just
defined as a target. Wonder if the toolchain just handles that.

Right, it's just a C file, it just handles reading the filename from
the authenticate configuration first interesting bits will be
{BXR}/usr.sbin/httpd/config.c[`config.c`] which I assume grabs the
data from the parsed file into a structure that can be reused in other
parts of the code opened up {BXR}/usr.sbin/httpd/config.c[`config.c`]
for reading (750 lines of C). We are not reading the whole of it 3
occurences of `htpasswd` first one inside.

.`config_setauth` function declaration
[c]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
int config_setauth(struct httpd *env,
                   struct auth *auth)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We have a httpd struct called {BXR}/usr.sbin/httpd/httpd.h#545[`env`]
and an {BXR}/usr.sbin/httpd/httpd.h#445[`auth`] struct, some code
related to privilege separation iterating over `PROC_MAX`.  My
assumption is the process needing the authentication setup is not the
same process as the one parsing. The code hence this code iterates
over the maximum amount of processes that could have been spawned. It
skips the process if it already has an authentication defined or it is
the currently running process. If not, it composes a message to send
to the other process using inter process communication quick check to
see what proc compose is.

.Executing
[sh]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ag ^proc_compose
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.Output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
proc.c
752:proc_compose_imsg(struct privsep *ps, enum privsep_procid id, int n,
768:proc_compose(struct privsep *ps, enum privsep_procid id,
775:proc_composev_imsg(struct privsep *ps, enum privsep_procid id, int n,
790:proc_composev(struct privsep *ps, enum privsep_procid id,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Defined in {BXR}/usr.sbin/httpd/proc.c[`proc.c`] calls
{BXR}/usr.sbin/httpd/proc.c#proc_compose_imsg[`proc_compose_imsg`]
defined in same file which iterates over a range of processes calling
{BXR}/usr.sbin/httpd/proc.c#imsg_compose_event[`imsg_compose_event`]
also defined in this file which calls
{BXR}lib/libutil/imsg.c#166[`imsg_compose`] and then
{BXR}/usr.sbin/httpd/proc.c#imsg_event_add[`imsg_event_add`]. `imsg_compose`
is part of {BXR}/lib/libutil/imsg.h[`imsg.h`] a system lib.

.Extract of man page output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
imsg_compose() is a routine which is used to quickly create and queue
an imsg.  It takes the same parameters as the imsg_create(),
imsg_add() and imsg_close() routines, except that only one ancillary
data buffer can be provided.  This routine returns 1 if it succeeds,
-1 otherwise.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{MAN}/imsg_compose[`imsg_event_add`] is slightly above and it boils
down to calling:

.Extract of man page output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
imsg_flush() is a function which calls msgbuf_write() in a loop until
all imsgs in the output buffer are sent. It returns 0 if it succeeds,
-1 otherwise.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`imsg_flush`, `event_del`, `event_set`, `event_add`:

.Extract of man page output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
imsg_flush() is a function which calls msgbuf_write() in a loop until
all imsgs in the output buffer are sent. It returns 0 if it succeeds,
-1 otherwise.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`event_del`, `event_set`, `event_add` are all part of `event.h` so are
system documented:

.Extract from man page
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The event API provides a mechanism to execute a function when a
specific event on a file descriptor occurs or after a given time has
passed.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

So the auth structure is indeed passed to a process using
inter-process communication.  The other 2 occurences are in
{BXR}/usr.sbin/httpd/config.c#725[`config_getauth`] receives the
{BXR}/lib/libutil/imsg.h#73[`imsg`] sent from
{BXR}/usr.sbin/httpd/config.c#703[`config_setauth`].  The auth
structure is compiled out using {MAN}/memcpy[`memcpy`] from the passed
in `imsg` then `auth_add` is called on it. We find where
{BXR}/usr.sbin/httpd/httpd.c#1279[`auth_add`] is defined:

.Executing
[sh]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ag ^auth_add
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.Output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
httpd.c
1279:auth_add(struct serverauth *serverauth, struct auth *auth)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Starting to read `auth_add`, we see calls to
{MAN}/man3/queue.3[`TAILQ`] functions, they are defined in
{BXR}/sys/sys/queue.h[`sys/queue.h`]:

.Executing
[sh]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
man TAILQ_FOREACH
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.Output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These macros define and operate on four types of data structures:
singly- linked lists, simple queues, lists, and tail queues.  All four
structures support the following functionality:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In our case  this is a tail  queue. Since we can define  more then one
site, using more then one file then  we have a queue of them stored as
serverauth. This  just adds each  auth to  that queue. Let's  list all
`auth_functions`:

.Executing
[sh]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ag ^auth
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.Output
[c]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
httpd.c
1279:auth_add(struct serverauth *serverauth, struct auth *auth)
1299:auth_byid(struct serverauth *serverauth, uint32_t id)
1312:auth_free(struct serverauth *serverauth, struct auth *auth)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{BXR}/usr.sbin/httpd/httpd.c#1279[`auth_add`], adds an entry,
{BXR}/usr.sbin/httpd/httpd.c#1312[`auth_free`] removes it from the
queue and {BXR}/usr.sbin/httpd/httpd.c#1299[`auth_byid`] just returns
the auth identified by some id.  Lets look where `auth_byid` is called
as that's should be near where the file is used. The single use seems
to be in {BXR}/usr.sbin/httpd/config.c[`config.c`]. It's called in
{BXR}/usr.sbin/httpd/config.c#333[`config_getserver_auth`]:

.`config_getserver_auth` function declaration
[c]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
int config_getserver_auth(struct httpd *env,
                          struct server_config *srv_conf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

It's fairly straightforward.  Gets an `httpd` env, a server config and
gets the authentication based on the id from the server config.  Let's
see where that is called also in
{BXR}/usr.sbin/httpd/config.c[`config.c`].

First occurrence is just a forward declaration.  Second one is the
function definition itself.  Third call occurs in
{BXR}/usr.sbin/httpd/config.c#349[`config_getserver_config`] and the
last one in {BXR}/usr.sbin/httpd/config.c#514[`config_getserver`]
which is a call handling `IMSGs`.

Going back to
{BXR}/usr.sbin/httpd/config.c#332[`config_getserver_auth`], we see
it's actually saved inside
{BXR}/usr.sbin/httpd/config.c#341[`srv_conf->auth`].  `srv_conf`
stands for `server_config`, so let's look when that value is read by
searching with `ag` the pattern `srv_conf->auth`:

.Executing
[sh]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ag 'srv_conf->auth'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.Output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
server.c
426:    srv_conf->auth = NULL;

auth
15:server.c:426: srv_conf->auth = NULL;
166:server_http.c:124:  const struct auth       *auth = srv_conf->auth;
190:server_http.c:1293: server_abort_http(clt, 401, srv_conf->auth_realm);
236:config.c:341:       if ((srv_conf->auth = auth_byid(env->sc_auth,
237:config.c:342:           srv_conf->auth_id)) == NULL)
267:config.c:435:                       srv_conf->auth = parent->auth;
268:config.c:436:                       srv_conf->auth_id = parent->auth_id;
269:config.c:437:                       (void)strlcpy(srv_conf->auth_realm,
270:config.c:439:                           sizeof(srv_conf->auth_realm));

config.c
341:    if ((srv_conf->auth = auth_byid(env->sc_auth,
342:        srv_conf->auth_id)) == NULL)
435:                    srv_conf->auth = parent->auth;
436:                    srv_conf->auth_id = parent->auth_id;
437:                    (void)strlcpy(srv_conf->auth_realm,
439:                        sizeof(srv_conf->auth_realm));

server_http.c
124:    const struct auth       *auth = srv_conf->auth;
1293: server_abort_http(clt, 401, srv_conf->auth_realm);
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We will ignore matches in config as we know they just set/pass values
around first {BXR}/usr.sbin/httpd/server.c[`server.c`]. Setting to
NULL is just some initialization, no usage nearby.  We are left with
{BXR}/usr.sbin/httpd/server_http.c[`server_http.c`] where it seems the
main usage happens. Let's go there. We find only a single match in:

.`server_http_authenticate` function declaration
[c]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
int
server_http_authenticate(struct server_config *srv_conf,
                         struct client *clt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Let's look at the code as it seems it has a bit more meat:

[c]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
const struct auth*auth = srv_conf->auth;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

I keep `auth` highlighted to visually better see when that's used.

There is  some initial header checks  first looks like the  header and
pass are  passed in  via headers  with `basic  auth`.  The  first code
splits them into `ctl_user` and  `ctl_pass` basic auth passes a base64
encoded `username:password`.  So the  first `strncmp` finds  the Basic
header part.

{BXR}/lib/libc/net/base64.c#190[`b64_pton`] decodes it from base64
into the decoded variable it's then split into `ctrl_pass` bysetting
it to the first character after `:` now we get to our file.

`auth->auth_htpasswd` stores the path to the file we generated with
{MAN}/htpasswd[`htpasswd`].  It's open read only by now I highlight
`fp` file is read line by line split as user/pass.  If there is no
password, we skip the entry and `explicit_bzero` the read line (just
in case).

If  the   username  doesn't  match,   we  skip  the  entry   and  also
`explicit_bzero`. Now we  use `crypt_checkpass`, and that's  the bit I
wanted to know!  We know that `htpasswd` uses `bcrypt` api as we read:

.Extract of man page output
[txt]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These functions are deprecated in favor of crypt_checkpass(3) and
crypt_newhash(3).
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now this means it might be sensible to replace the bcrypt API usage in
`htpasswd` with  the new `crypt_*`  API back to  the code, we  can see
that when `crypt_checkpass`  says the passwords match ret is  set to 0
so let's  do a quick  look where `server_http_authenticate`  is called
also in `server_http.c` one call in `server_response`:

[c]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
} else if (srv_conf->flags & SRVFLAG_AUTH &&
           server_http_authenticate(srv_conf, clt) == -1) {
    server_abort_http(clt, 401, srv_conf->auth_realm);
    return (-1);
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The file has mixed indentation,  that's worth remembering as it should
be unified if we have something to  change here the usage code is easy
though if this  entry has a server. Auth required  check the auth.  If
the auth failed, abort and send a 401 to the user and that's it as the
other occurence is just the function declaration and definition.